buildscript {
    repositories {
      jcenter()
      maven { url "https://spinnaker.bintray.com/gradle" }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.netflix.nebula:nebula-release-plugin:8.0.3'
        classpath 'com.netflix.spinnaker.gradle:spinnaker-dependency-bump-plugin:5.2.1'
    }
}

apply plugin: 'idea'
apply plugin: 'nebula.nebula-release'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'maven'

group = 'com.netflix.spinnaker'
description = 'Common dependencies for Spinnaker'

release {
  defaultVersionStrategy = nebula.plugin.release.NetflixOssStrategies.SNAPSHOT
}

publishing {
  publications {
    spinnakerDependencies(MavenPublication) {
      artifact 'src/spinnaker-dependencies.yml'
    }
  }
}

def prop = { String name ->
  project.hasProperty(name) ? project.property(name) : ''
}

bintray {
  user = prop('bintrayUser')
  key = prop('bintrayKey')
  publications = ['spinnakerDependencies']
  publish = true
  dryRun = false
  pkg {
    userOrg = 'spinnaker'
    repo = 'spinnaker'
    name = project.name
    desc = prop('description')
    licenses = ['Apache-2.0']
    websiteUrl = 'https://github.com/spinnaker/spinnaker-dependencies'
    vcsUrl = 'https://github.com/spinnaker/spinnaker-dependencies.git'
    issueTrackerUrl = 'https://github.com/spinnaker/spinnaker/issues'
    attributes = [:]
    version {
      name = project.version
      vcsTag = "v${project.version}"
      attributes = [:]
    }
  }
}

project.gradle.taskGraph.whenReady { graph ->
  bintrayUpload.onlyIf {
    graph.hasTask(':final') || graph.hasTask(':candidate')
  }
}

ext.fetchDependencies = {
  /*
   * Use http://platform.spring.io/platform/ as the basis for making suggested changes to spinnaker-dependencies.yml
   */
  def platformVersion = 'Brussels-SR14'

  def repo = (platformVersion.endsWith('-BUILD-SNAPSHOT')) ?
          'https://repo.spring.io/snapshot' :
          (platformVersion.contains('-RC') || platformVersion.contains('-M')) ?
                  'https://repo.spring.io/milestone' :
                  'https://repo.spring.io/release'
  def group = "io.spring.platform".replaceAll('\\.', '/')
  def artifact = "platform-bom"
  def path = "${repo}/${group}/${artifact}/${platformVersion}/${artifact}-${platformVersion}.properties"

  println "Fetching ${platformVersion} platform from ${path}..."

  Properties props = new Properties()
  path.toURL().openStream().withStream { propertyStream ->
    props.load(propertyStream)
  }

  def updatedListOfDeps = new File('src/spinnaker-dependencies.template').text

  println "Updating version settings based on ${platformVersion}..."

  props.keySet().each { lib ->
    updatedListOfDeps = updatedListOfDeps.replaceAll('\\{\\{' + lib + '}}', props.getProperty(lib))
  }

  return updatedListOfDeps
}

task('checkDependencies', description: "Checks that spinnaker-dependencies.yml is currently up to date.") << {
  def updatedDeps = fetchDependencies()

  def currentDeps = new File('src/spinnaker-dependencies.yml').text
  if (currentDeps != updatedDeps) {
    throw new GradleException('spinnaker-dependencies.yml is out of date. Regenerate it by running the updateDependencies gradle task.')
  }
}

task('updateDependencies', description: "Rebuilds spinnaker-dependencies.yml based on Spring's platform BOM.") << {
  def updatedListOfDeps = fetchDependencies()
  new File('src/spinnaker-dependencies.yml').withWriter { writer ->
    writer.write(updatedListOfDeps)
  }
}

tasks.check.dependsOn(checkDependencies)
tasks.bintrayUpload.dependsOn(build)
tasks.publishToMavenLocal.dependsOn(build)
tasks.release.dependsOn(updateDependencies, bintrayUpload)

apply plugin: com.netflix.spinnaker.gradle.dependency.SpinnakerDependencyBumpPlugin
